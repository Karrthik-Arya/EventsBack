// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Group {
    id  String @default(cuid()) @id
    participants UserGroup[]
    hostId String
    host User @relation(fields: [hostId], references: [id])
    eventId String 
    event Event @relation(fields: [eventId], references: [id])
    title String
    schedule Json[]
    image String?
}

model Event {
    id String @default(cuid()) @id
    title String
    description String
    image String
    location String
    createdAt   DateTime  @default(now()) @map(name: "created_at")
    eventTime   DateTime 
    owner User  @relation(fields: [ownerId], references: [id])
    ownerId String
    groups Group[]
}

model UserGroup {
    user    User     @relation(fields: [userId], references: [id])
    userId  String // relation scalar field (used in the `@relation` attribute above)
    group   Group @relation(fields: [groupId], references: [id])
    groupId String
    @@id([userId, groupId])
}

model User {
  id            String       @default(cuid()) @id
  username      String
  email         String?   @unique
  age           Int?
  role          String
  sessionToken  String
  refreshToken  String
  gender        String?
  image         String?
  about         Json?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  groups        UserGroup[]
  ownedEvents   Event[]
  hostedGroups Group[]
}